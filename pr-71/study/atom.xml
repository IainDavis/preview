<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iaindavis.github.io/preview/pr-71/study</id>
    <title>Iain Davis Blog</title>
    <updated>2024-11-02T12:22:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iaindavis.github.io/preview/pr-71/study"/>
    <subtitle>Iain Davis Blog</subtitle>
    <icon>https://iaindavis.github.io/preview/pr-71/img/logo-favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[Hands-On: Sidecar | Topz (Designing Distributed Systems)]]></title>
        <id>https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz</id>
        <link href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz"/>
        <updated>2024-11-02T12:22:00.000Z</updated>
        <summary type="html"><![CDATA[Sidecar Hands-on Exercise: TOPZ]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="sidecar-hands-on-exercise-topz">Sidecar Hands-on Exercise: TOPZ<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#sidecar-hands-on-exercise-topz" class="hash-link" aria-label="Direct link to Sidecar Hands-on Exercise: TOPZ" title="Direct link to Sidecar Hands-on Exercise: TOPZ">​</a></h2>
<p>The purpose of this exercise is to explore the "sidecar" pattern of deploying
software using containers and container groups.</p>
<p>This exercise has the reader creating an arbitrary containerised
application and a <strong>sidecar</strong> in the same namespace. The sidecar provides
resource monitoring for the virtual host.</p>
<p>The provided instructions use a purpose-built utility called <code>topz</code>,
and leaves the main application ambiguous (to be determined by the
implementer). The implementation is started using Docker CLI commands.</p>
<p>Below is the exercise as defined in the book's text:</p>
<div class="container_hWMK"><div tabindex="1" data-testid="expandable-section-:Rblbeh:" id="expandable-section-:Rblbeh:" class="expandableBlock_ggz7" hidden=""><p>Hands On: Deploying the topz Container
To see the topz sidecar in action, you first need to deploy some other container to act as the application container. Choose an existing application that you are running and deploy it using Docker:</p><blockquote>
</blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker run -d &lt;my-app-image&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;container-hash-value&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">After you run that image, you will receive the identifier for that specific container. It will look something like: cccf82b85000…​ If you don’t have it, you can always look it up using the docker ps command, which will show all currently running containers. Assuming you have stashed that value in an environment variable named APP_ID, you can then run the topz container in the same PID namespace using:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker run --pid=container:${APP_ID} \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -p 8080:8080 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    brendanburns/topz:db0fa58 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /server --addr=0.0.0.0:8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This will launch the topz sidecar in the same PID namespace as the application container. Note that you may need to change the port that the sidecar uses for serving if your application container is also running on port 8080. Once the sidecar is running, you can visit <a href="http://localhost:8080/topz" target="_blank" rel="noopener noreferrer">http://localhost:8080/topz</a> to get a complete readout of the processes that are running in the application container and their resource usage.</p><p>You can mix this sidecar with any other existing container to easily get a view into how the container is using its resources via a web interface.</p></div><button tabindex="0" class="toggle_dJXd" aria-expanded="false" aria-controls="expandable-section-toggle-:Rblbeh:">show more...</button></div>
<p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="local-setup">Local Setup<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#local-setup" class="hash-link" aria-label="Direct link to Local Setup" title="Direct link to Local Setup">​</a></h2>
<p>I'm using the default installation of Rancher Desktop (v1.16.0) on Apple M1 Silicon, along with the provided <code>dockerd</code> container engine</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="challenges">Challenges<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#challenges" class="hash-link" aria-label="Direct link to Challenges" title="Direct link to Challenges">​</a></h2>
<ol>
<li>
<p>The author doesn't provide the main application for the exercise</p>
<p>In the absence of having a specific application to run, on the
advice of my code-assistant AI, I've opted to use a standard NGINX
container as my base application. This gives me some default
behavior for the "main application" that can be observed to verify the setup</p>
</li>
<li>
<p>The provided image expects a <code>Linux/AMD64</code> architecture.
My code assistant AI has suggested two alternatives:</p>
<ol>
<li>use an alternate sidecar application (cAdvisor)</li>
<li>Build a Multi-Archtecture Image of Topz</li>
</ol>
</li>
</ol>
<p>Since this is all practice, I will try both approaches</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solutions">Solutions<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#solutions" class="hash-link" aria-label="Direct link to Solutions" title="Direct link to Solutions">​</a></h2>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">Solution 01</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">Solution 02</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h3>
<p>This solution applies Nova's suggestion of replacing the <code>topz</code> sidecar (not compatible with either Mac OS or with the Mac Silicon hardware) with an alternate sidecar. It uses NGINX as the "main application", assuming some static content is being served, and <code>cAdvisor</code> as the sidecar.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution-artifacts">Solution Artifacts<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#solution-artifacts" class="hash-link" aria-label="Direct link to Solution Artifacts" title="Direct link to Solution Artifacts">​</a></h3>
<p>The <a href="https://github.com/IainDavis/book-exercises/tree/main/designing-distributed-systems/sidecar/topz/01" target="_blank" rel="noopener noreferrer" title="directory with all solution files">solution</a> is implemented as</p>
<ul>
<li>an <a href="https://github.com/IainDavis/book-exercises/blob/main/designing-distributed-systems/sidecar/topz/01/nginx.conf" target="_blank" rel="noopener noreferrer" title="solution 01 NGINX configuration">nginx.conf</a> file that contains the service configuration</li>
<li>a <a href="https://github.com/IainDavis/book-exercises/blob/main/designing-distributed-systems/sidecar/topz/01/docker-compose.yaml" target="_blank" rel="noopener noreferrer" title="solution 01 docker-compose file which creates the containers and shared network">docker-compose.yaml</a> file that contains the docker network and container information</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution-design">Solution Design<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#solution-design" class="hash-link" aria-label="Direct link to Solution Design" title="Direct link to Solution Design">​</a></h3>
<div class="container_hWMK"><div tabindex="1" data-testid="expandable-section-:R6erjlbeh:" id="expandable-section-:R6erjlbeh:" class="expandableBlock_ggz7" hidden=""></div><button tabindex="0" class="toggle_dJXd" aria-expanded="false" aria-controls="expandable-section-toggle-:R6erjlbeh:">show diagram...</button></div>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-solution">Running the solution<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#running-the-solution" class="hash-link" aria-label="Direct link to Running the solution" title="Direct link to Running the solution">​</a></h3>
<p>In the directory that contains the solution files:
Run the following command to start the solution implementation (will run on port :8080)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose up -d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Screen captures</summary><div><div class="collapsibleContent_i85q"><p><img decoding="async" loading="lazy" alt="Screen capture of terminal output of docker-compose up command" src="https://iaindavis.github.io/preview/pr-71/assets/images/docker-up-18d33a6dc06c865b51a257a228e0b1e4.png" title="Successful execution of dockerfile should look like this" width="1394" height="966" class="img_ev3q"></p><p><img decoding="async" loading="lazy" alt="Screen capture of Rancher Desktop UI with created containers running" src="https://iaindavis.github.io/preview/pr-71/assets/images/running-containers-81e38282a387fe163b0932d7433e8ec1.png" width="1145" height="798" class="img_ev3q"></p></div></div></details>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="observe-the-solution">Observe the solution<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#observe-the-solution" class="hash-link" aria-label="Direct link to Observe the solution" title="Direct link to Observe the solution">​</a></h4>
<p>With the Docker stack running:</p>
<ul>
<li>point your browser to <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer"><code>localhost:8080</code></a> to see the default NGINX welcome page... this is a stand-in for the "main application"</li>
<li>point your browser to <a href="http://localhost:8080/cadvisor/" target="_blank" rel="noopener noreferrer"><code>localhost:8080/cadvisor</code></a> or <a href="http://localhost:8080/cadvisor/containers" target="_blank" rel="noopener noreferrer"><code>localhost:8080/cadvisor/containers</code></a> to see the UI of the cadvisor sidecar</li>
<li>Navigate the cadvisor page to be sure the links work, and external resources are loading (you should see graphs, gauges, <em>etc.</em> with data updating in real time)</li>
</ul>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>If running in Mac OS, you will see regularly recurring <code>500</code> errors, if you check the Network tabs. This is because cAdvisor is trying to invoke a command that runs the <code>ps</code> command-line utility to retrieve some additional system data. This utility is not available on Mac OS. But the absence of this data doesn't otherwise affect cAdvisor, and it remains a useful and valuable tool withoutt these calls.</p></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Screen captures</summary><div><div class="collapsibleContent_i85q"><p><img decoding="async" loading="lazy" alt="Screen capture of NGINX default page standing-in as the &amp;quot;main application&amp;quot; in the sidecar pattern" src="https://iaindavis.github.io/preview/pr-71/assets/images/mock-application-3758546071fa5a6145c287b4cda0c6ba.png" width="938" height="736" class="img_ev3q"></p><p>_Note: navigating to <code>/cadvisor</code> (which has no actual content) redirects to <code>/cadvisor/containers</code>, which is the root of the cAdvisor content.
<img decoding="async" loading="lazy" alt="Screen recording showing navigation to &amp;#39;sidecar&amp;#39; app, with redirect from sidecar root to main page content" src="https://iaindavis.github.io/preview/pr-71/assets/images/sidecar-redirect-4a020755f4aabdbec47f6c40754c66c1.gif" width="828" height="624" class="img_ev3q"></p><p><img decoding="async" loading="lazy" alt="Screen capture with cAdvisor styles and fetched data displayed, indicating successful redirect of URLS in meta tags" src="https://iaindavis.github.io/preview/pr-71/assets/images/data-fetch-success-b08eff761c3df03fc74752c5e65c12b3.png" width="938" height="970" class="img_ev3q"></p><p><img decoding="async" loading="lazy" alt="Screen capture showing navigation with links, including style and data fetching success" src="https://iaindavis.github.io/preview/pr-71/assets/images/links-work-a8f874af6c20ac39f2d018dd68bfc20b.gif" width="828" height="624" class="img_ev3q"></p></div></div></details>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="stopping-the-solution">Stopping the solution<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#stopping-the-solution" class="hash-link" aria-label="Direct link to Stopping the solution" title="Direct link to Stopping the solution">​</a></h4>
<p>Navigate to this folder in your clone of this repository
Run the following command:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose down</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Screen capture</summary><div><div class="collapsibleContent_i85q"><p><img decoding="async" loading="lazy" alt="Screen capture showing output of docker-compose down" src="https://iaindavis.github.io/preview/pr-71/assets/images/docker-down-7fab074afe4d0b0e8b00a86efdcf13e3.png" width="760" height="467" class="img_ev3q"></p></div></div></details>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution-01-challenges">Solution 01 Challenges<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#solution-01-challenges" class="hash-link" aria-label="Direct link to Solution 01 Challenges" title="Direct link to Solution 01 Challenges">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="path-and-port-rewriting">Path and Port Rewriting:<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#path-and-port-rewriting" class="hash-link" aria-label="Direct link to Path and Port Rewriting:" title="Direct link to Path and Port Rewriting:">​</a></h4>
<ul>
<li>Managed cAdvisor’s links and assets that initially lacked correct paths and port information, leading to broken links and missing resources.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="handling-trailing-slashes-and-redirects">Handling Trailing Slashes and Redirects:<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#handling-trailing-slashes-and-redirects" class="hash-link" aria-label="Direct link to Handling Trailing Slashes and Redirects:" title="Direct link to Handling Trailing Slashes and Redirects:">​</a></h4>
<ul>
<li>Configured Nginx to append trailing slashes on specific routes (top-level routes) that otherwise report a 404. Note that for routes below the top level (<em>e.g.</em>, <code>/containers/docker</code>), <em>including</em> the trailing slash is an error</li>
<li>Addressed issues where URLs were incorrectly rewritten, causing multiple redirects or incorrect paths.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="caching-and-profile-specific-issues">Caching and Profile-Specific Issues:<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#caching-and-profile-specific-issues" class="hash-link" aria-label="Direct link to Caching and Profile-Specific Issues:" title="Direct link to Caching and Profile-Specific Issues:">​</a></h4>
<ul>
<li>Resolved persistent caching issues where browser profiles retained outdated URL mappings, leading to debugging obstacles.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="optimizing-resource-buffering">Optimizing Resource Buffering:<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#optimizing-resource-buffering" class="hash-link" aria-label="Direct link to Optimizing Resource Buffering:" title="Direct link to Optimizing Resource Buffering:">​</a></h4>
<ul>
<li>Increased Nginx buffer sizes and disabled disk buffering to handle the larger upstream data from cAdvisor, which required handling more data-intensive API responses. This was largely a developer-experience issue, as I like to view log output in [<code>lnav</code>](<a href="https://lnav.org/" target="_blank" rel="noopener noreferrer">https://lnav.org/</a> "The LogFile Navigator | command-line log viewer) and the warnings announcing exceeding buffer sizes were disrupting the lnav display output.</li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="comments">Comments<a href="https://iaindavis.github.io/preview/pr-71/study/2024/11/2/2024-11-2-designing-distributed-systems-sidecar-topz/designing-distributed-systems-sidecar-topz#comments" class="hash-link" aria-label="Direct link to Comments" title="Direct link to Comments">​</a></h3>
<p>This turned out to be as much or more an exercise in learning NGINX as a lesson in the sidecar pattern, but I seem to have gotten there in the end.</p>
<p>I've gone through several iterations, with only the final iteration captured here. The first iteration exposed all of the cAdvisor paths as top-level paths, just below the root, (<em>e.g.</em>, /containers, /docker, <em>etc.</em>). It occurred to me to apply the sidecar as a general pattern, it was probably wiser to use a less-ambiguous path (some hypthetical 'main application' might conceivably require a <code>containers</code> path at the root), and to only occupy one namespace for the cadvisor paths, so the second solution takes that approach, using <code>sub_filter</code> directives to rewrite URLs in the HTML returned from the downstream cAdvisor service, so that all urls meant to redirect to the sidecar have paths prefixed with <code>/cadvisor</code>.</p>
<p>A good deal of this work was also teasing out which suggestions of the AI were valuable and which were not. For example, when I had some links that were not working correctly, the AI suggested rewriting all relative paths, which ended up having disastrous consequences for loading non-html resources like stylesheets and scripts, and proved unnecessary anyway. Another dubious AI suggestion was using <code>$host:$server_port</code> to force re-written URLs to have the correct port address. It turns out the correct solution was to use the <code>$http_host</code> variable, but the AI continued to suggest the other usage.</p>
<p>Taking a step back to more general observations, I find that the AI (in this case ChatGPT 4o) does pretty well with general purpose languages like JavaScript, but falters a bit with purpose-built languages like the configuration language in NGINX or other DSLs. Not sure if that observation will hold up to scrutiny over time. But I will keep it in mind.</p></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><p>TEMPORARY CONTENT 02
Test 02</p></div></div></div>]]></content>
        <category label="Book | Desigining Distributed Systems" term="Book | Desigining Distributed Systems"/>
        <category label="Hands-On Exercise" term="Hands-On Exercise"/>
    </entry>
</feed>